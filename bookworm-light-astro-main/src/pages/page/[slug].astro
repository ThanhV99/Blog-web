---
import config from "@config/config.json";
import Base from "@layouts/Base.astro";
import Pagination from "@layouts/components/Pagination.astro";
import Posts from "@layouts/Posts.astro";
import { getSinglePage } from "@lib/contentParser.astro";
import { sortByDate } from "@lib/utils/sortFunctions";

export async function getStaticPaths() {
  const posts = await getSinglePage("posts");
  const totalPages = Math.ceil(posts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}

const { slug } = Astro.params;

// const posts = await getSinglePage("posts");
// const sortedPosts = sortByDate(posts);
// const totalPages = Math.ceil(posts.length / config.settings.pagination);
// const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
// const indexOfLastPost = currentPage * config.settings.pagination;
// const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
// const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);
import {fetchApiListPosts} from '../../api/apiListPosts.astro';
import PostsTest from "@layouts/PostsTest.astro";

const data = await fetchApiListPosts("blog.BlogPage", 'description,date_post,feed_image,categories(name),author', '-first_published_at');
const totalPages = Math.ceil(data.meta.total_count / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = data.items.slice(indexOfFirstPost, indexOfLastPost);
---

<Base>
  <section class="section">
    <div class="container">
      <PostsTest posts={currentPosts} className="mb-16" />
      <!-- <Posts className="mb-16" posts={currentPosts} /> -->
      <Pagination totalPages={totalPages} currentPage={currentPage} />
    </div>
  </section>
</Base>
